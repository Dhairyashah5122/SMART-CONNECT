# SMART Connect - Production Docker Compose
# MIT License - Westcliff University Property

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smart_connect_db
    environment:
      POSTGRES_DB: smart_connect
      POSTGRES_USER: smart_connect_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SmartConnect2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/create_tables_updated.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds/sample_data.sql:/docker-entrypoint-initdb.d/02-data.sql
    ports:
      - "5432:5432"
    networks:
      - smart_connect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smart_connect_user -d smart_connect"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: smart_connect_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart_connect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart_connect_backend
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: smart_connect
      DB_USER: smart_connect_user
      DB_PASSWORD: ${DB_PASSWORD:-SmartConnect2024!}
      DB_SCHEMA: capstone
      
      # Application
      ENVIRONMENT: production
      DEBUG: false
      SECRET_KEY: ${SECRET_KEY}
      
      # AI Providers
      AI_COST_OPTIMIZATION_ENABLED: true
      AI_DEFAULT_PROVIDER: ollama
      OLLAMA_BASE_URL: http://ollama:11434
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      
      # CORS
      CORS_ORIGINS: ${FRONTEND_URL:-http://localhost:3001}
      
      # Redis (if enabled)
      REDIS_ENABLED: true
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smart_connect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ollama (Free Local AI)
  ollama:
    image: ollama/ollama:latest
    container_name: smart_connect_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - smart_connect_network
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: smart_connect_frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${BACKEND_URL:-http://localhost:8000}
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - smart_connect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smart_connect_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - smart_connect_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: smart_connect_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - smart_connect_network

  grafana:
    image: grafana/grafana:latest
    container_name: smart_connect_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - smart_connect_network

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  smart_connect_network:
    driver: bridge

# Production deployment commands:
# 1. Copy .env.example to .env and configure
# 2. Generate SSL certificates in nginx/ssl/
# 3. Run: docker-compose up -d
# 4. Initialize Ollama models: docker exec smart_connect_ollama ollama pull llama2
# 5. Access application at https://yourdomain.com